{
  "ignorePatterns": [
    "node_modules/",
    "dist/",
    "build/",
    "coverage/",
    "public/",
    "e2e/",
    "out",
    ".detoxrc.js",
    "cypress/",
    "jest.setup.ts",
    "*.config.ts",
    "*.config.js",
    "src/api/supabase.ts",
    "src/types/database.types.ts"
  ],
  // Configuration for JavaScript files
  "overrides": [
    // Configuration for TypeScript files
    {
      "extends": [
        "plugin:tailwindcss/recommended",
        "plugin:unicorn/all",
        "hardcore",
        "hardcore/react",
        "hardcore/react-performance",
        "hardcore/react-testing-library",
        "hardcore/jest",
        "hardcore/fp",
        "hardcore/ts",
        "plugin:react/jsx-runtime",
        "plugin:prettier/recommended",
        "plugin:@tanstack/eslint-plugin-query/recommended"
      ],
      "files": [
        "**/*.ts",
        "**/*.tsx"
      ],
      "parserOptions": {
        "project": "./tsconfig.json"
      },
      "plugins": [
        "@typescript-eslint",
        "unused-imports",
        "tailwindcss",
        "simple-import-sort"
      ],
      "rules": {
        "@typescript-eslint/array-type": "off",
        "@typescript-eslint/comma-dangle": "off", // Avoid conflict rule between Eslint and Prettier
        "@typescript-eslint/consistent-indexed-object-style": "off",
        "@typescript-eslint/consistent-type-definitions": "off",
        "@typescript-eslint/consistent-type-imports": [
          "error",
          {
            "fixStyle": "inline-type-imports",
            "prefer": "type-imports"
          }
        ], // Ensure `import type` is used when it's necessary
        "@typescript-eslint/explicit-function-return-type": "off",
        "@typescript-eslint/lines-around-comment": "off",
        "@typescript-eslint/lines-between-class-members": "off",
        "@typescript-eslint/member-delimiter-style": "off",
        "@typescript-eslint/no-confusing-void-expression": "off",
        "@typescript-eslint/no-misused-promises": "off",
        "@typescript-eslint/no-shadow": [
          "error",
          {
            "allow": [
              "Text"
            ]
          }
        ],
        "@typescript-eslint/no-type-alias": "off",
        "@typescript-eslint/no-unused-vars": "off",
        "@typescript-eslint/parameter-properties": [
          "error",
          {
            "prefer": "parameter-property"
          }
        ],
        "@typescript-eslint/prefer-destructuring": "off",
        "@typescript-eslint/quotes": "off", // handled by prettier & vscode
        "@typescript-eslint/semi": "off", // handled by prettier & vscode
        "capitalized-comments": "off",
        "comma-dangle": [
          "error",
          "always-multiline"
        ],
        "compat/compat": "off",
        "curly": [
          "error",
          "multi"
        ],
        "eslint-comments/no-use": "off", // we want to be able to use eslint-disable
        "etc/no-commented-out-code": "off", // we want to ^^
        "etc/no-const-enum": "off",
        "etc/no-deprecated": "off", // slow
        "etc/no-internal": "off",
        "etc/no-misused-generics": "off",
        "etc/prefer-interface": "off",
        "ext/lines-between-object-properties": "off", // no thanks :)
        "func-names": [
          "error",
          "always"
        ],
        "import/default": "off",
        "import/export": "off",
        "import/exports-last": "off", // annoying in react projects
        "import/extensions": "off", // Avoid missing file extension errors when using '@/' alias
        "import/first": "off",
        "import/named": "off",
        "import/namespace": "off",
        "import/newline-after-import": "off",
        "import/no-absolute-path": "off",
        "import/no-amd": "off",
        "import/no-cycle": "off",
        "import/no-deprecated": "off",
        "import/no-duplicates": "off",
        "import/no-dynamic-require:": "off",
        "import/no-extraneous-dependencies": "off",
        "import/no-import-module-exports": "off",
        "import/no-mutable-exports": "off",
        "import/no-named-as-default": "off",
        "import/no-named-as-default-member": "off",
        "import/no-named-default": "off",
        "import/no-relative-packages": "off",
        "import/no-self-import": "off",
        "import/no-unassigned-import": "off",
        "import/no-unresolved": "off",
        "import/no-unused-modules": "off",
        "import/no-useless-path-segments": "off",
        "import/no-webpack-loader-syntax": "off",
        "import/order": "off",
        "import/prefer-default-export": "off", // Named export is easier to refactor automatically
        "import/unambiguous": "off",
        "indent": "off", // handled by prettier & vscode
        "jest-formatting/padding-around-all": "off",
        "jest/no-conditional-in-test": "off",
        "jest/no-deprecated-functions": "off",
        "jest/no-restricted-matchers": "off",
        "jest/prefer-lowercase-title": "off",
        "jsdoc/require-param-type": "off",
        "jsdoc/require-returns-type": "off",
        "jsx-a11y/click-events-have-key-events": "off",
        "jsx-a11y/no-noninteractive-element-interactions": "off",
        "jsx-a11y/no-static-element-interactions": "off",
        "line-comment-position": "off", // no thanks :)
        "lines-around-comment": "off", // no thanks :)
        "lines-between-class-members": "off",
        "logical-assignment-operators": "off",
        "max-len": "off", // handled by prettier & vscode
        "max-statements": [
          "error",
          20
        ],
        "max-statements-per-line": "off",
        "no-console": "error",
        "no-inline-comments": "off",
        "no-restricted-syntax": [
          "error",
          {
            "message": "Avoid using Class, just use good old unit-testable functions :)",
            "selector": "ClassDeclaration"
          }
        ], // Overrides Airbnb configuration and enable no-restricted-syntax
        "object-curly-spacing": [
          "error",
          "always"
        ],
        "padding-line-between-statements": "off",
        "prefer-destructuring": "off",
        "prettier/prettier": "off",
        "putout/putout": "off",
        "quote-props": [
          "error",
          "consistent-as-needed"
        ],
        "quotes": "off", // handled by prettier & vscode
        "react/boolean-prop-naming": "off", // generate an error : Cannot read properties of undefined (reading 'name') in ExternalLink.tsx
        "react/destructuring-assignment": "off", // Vscode doesn't support automatically destructuring, it's a pain to add a new variable
        "react/forbid-component-props": "off", // because we want to use classNames
        "react/function-component-definition": "off", // Disable Airbnb's specific function type
        "react/jsx-props-no-spreading": "off", // _app.tsx uses spread operator and also, react-hook-form
        "react/require-default-props": "off", // Allow non-defined react props as undefined
        "regexp/require-unicode-sets-regexp": "off", // not well supported
        "require-atomic-updates": [
          "error",
          {
            "allowProperties": true
          }
        ],
        "security/detect-bidi-characters": "off", // generate the error : definitions for security/detect-bidi-characters are not present
        "semi": "off", // handled by prettier & vscode
        "simple-import-sort/exports": "error", // Export configuration for `eslint-plugin-simple-import-sort`
        "simple-import-sort/imports": "off", // Import configuration for `eslint-plugin-simple-import-sort`
        "space-before-function-paren": "off", // handled by prettier & vscode
        "total-functions/no-partial-division": "off",
        "total-functions/no-unsafe-readonly-mutable-assignment": "off",
        "unicorn/no-array-for-each": "off",
        "unicorn/no-process-exit": "off",
        "unicorn/prefer-module": "off",
        "unicorn/prefer-spread": "off",
        "unicorn/prefer-string-replace-all": "off",
        "unicorn/prefer-switch": "off",
        "unicorn/prevent-abbreviations": [
          "error",
          {
            "allowList": {
              "args": true,
              "pkg": true,
              "str": true
            }
          }
        ],
        "unicorn/switch-case-braces": "off",
        "unused-imports/no-unused-imports": "error",
        "unused-imports/no-unused-vars": [
          "error",
          {
            "argsIgnorePattern": "^_"
          }
        ]
      }
    },
    // Configuration for testing
    {
      "extends": [
        "plugin:jest/recommended",
        "plugin:jest-formatting/recommended",
        "plugin:testing-library/react"
      ],
      "files": [
        "**/*.test.ts",
        "**/*.test.tsx"
      ],
      "plugins": [
        "jest",
        "jest-formatting",
        "testing-library"
      ],
      "rules": {}
    },
    // Configuration for e2e testing
    {
      "extends": [
        "plugin:jest/recommended",
        "plugin:jest-formatting/recommended"
      ],
      "files": [
        "e2e/**/*.ts"
      ],
      "parserOptions": {
        "project": "./e2e/tsconfig.json"
      },
      "plugins": [
        "jest",
        "jest-formatting",
        "detox"
      ],
      "rules": {
        "import/no-extraneous-dependencies": [
          "error",
          {
            "devDependencies": true
          }
        ]
      }
    }
  ],
  "root": true,
  "settings": {
    "tailwindcss": {
      "whitelist": [
        "app-[a-z\\d-]+"
      ]
    }
  }
}